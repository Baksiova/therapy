# privacy_modes.py - Syst√©m pre r√¥zne privacy m√≥dy

from flask import Flask, request, jsonify, session
import os
import uuid
import time
from enum import Enum
from typing import Dict, List, Optional
import json

class PrivacyMode(Enum):
    EPHEMERAL = "ephemeral"      # ≈Ωiadne ukladanie - v≈°etko v pam√§ti
    TEMPORARY = "temporary"      # Ukladanie na 24h, potom auto-delete
    PERSISTENT = "persistent"    # Ukladanie a≈æ k√Ωm pou≈æ√≠vateƒæ nezma≈æe
    ENCRYPTED = "encrypted"      # Ukladanie so siln√Ωm ≈°ifrovan√≠m

class PrivacyManager:
    """
    Mana≈æ√©r pre r√¥zne privacy m√≥dy pou≈æ√≠vateƒæa
    """
    
    def __init__(self):
        # In-memory storage pre ephemeral m√≥dy
        self.ephemeral_sessions = {}
        
        # Temporary storage s expiration timestamps
        self.temporary_sessions = {}
        
        # User privacy preferences
        self.user_privacy_choices = {}
        
    def get_privacy_options(self) -> Dict:
        """Vr√°ti dostupn√© privacy options pre frontend"""
        return {
            "modes": [
                {
                    "id": "ephemeral",
                    "name": "üî• Ultra Priv√°tny",
                    "description": "Niƒç sa neuklad√°. Konverz√°cia existuje len poƒças session.",
                    "features": [
                        "‚úÖ Zero storage - ≈æiadne stopy",
                        "‚úÖ Perfektn√© pre citliv√© t√©my", 
                        "‚úÖ GDPR compliant by design",
                        "‚ùå ≈Ωiadna hist√≥ria medzi session"
                    ],
                    "retention": "0 hod√≠n",
                    "recommended": True
                },
                {
                    "id": "temporary", 
                    "name": "‚è∞ Doƒçasn√Ω",
                    "description": "Konverz√°cia sa automaticky zma≈æe po 24 hodin√°ch.",
                    "features": [
                        "‚úÖ Kontextov√° hist√≥ria v r√°mci d≈àa",
                        "‚úÖ Automatick√© mazanie po 24h",
                        "‚úÖ Dobr√Ω kompromis medzi funkƒçnos≈•ou a privacy",
                        "‚ö†Ô∏è D√°ta na serveri max 24h"
                    ],
                    "retention": "24 hod√≠n",
                    "recommended": False
                },
                {
                    "id": "persistent",
                    "name": "üìö Trval√Ω",
                    "description": "Hist√≥ria sa uklad√° a≈æ k√Ωm ju sami nezma≈æete.",
                    "features": [
                        "‚úÖ Dlhodob√° hist√≥ria konverz√°ci√≠",
                        "‚úÖ Tracking pokroku a trendov",
                        "‚úÖ Personalizovan√© AI odpovede",
                        "‚úÖ Kedykoƒævek mo≈ænos≈• zmaza≈• v≈°etko",
                        "‚ö†Ô∏è D√°ta na serveri a≈æ do zmazania"
                    ],
                    "retention": "A≈æ do zmazania pou≈æ√≠vateƒæom",
                    "recommended": False
                },
                {
                    "id": "encrypted",
                    "name": "üîê ≈†ifrovan√Ω",
                    "description": "Historia sa uklad√° s end-to-end ≈°ifrovan√≠m.",
                    "features": [
                        "‚úÖ V≈°etky v√Ωhody trval√©ho m√≥du",
                        "‚úÖ End-to-end ≈°ifrovanie",
                        "‚úÖ Ani admin servera nem√¥≈æe ƒç√≠ta≈• spr√°vy",
                        "‚úÖ V√°≈° kƒæ√∫ƒç = va≈°a kontrola",
                        "‚ùå Straten√Ω kƒæ√∫ƒç = straten√© d√°ta"
                    ],
                    "retention": "≈†ifrovan√© a≈æ do zmazania",
                    "recommended": False
                }
            ],
            "gdpr_info": {
                "right_to_delete": "M√°te pr√°vo kedykoƒævek zmaza≈• v≈°etky svoje d√°ta",
                "right_to_export": "M√¥≈æete exportova≈• svoje d√°ta v JSON form√°te", 
                "right_to_portability": "Va≈°e d√°ta s√∫ exportovateƒæn√©",
                "contact": "privacy@klidbot.com"
            }
        }
    
    def set_user_privacy_choice(self, session_id: str, mode: str, user_consent: Dict) -> bool:
        """Nastav√≠ privacy voƒæbu pou≈æ√≠vateƒæa"""
        try:
            privacy_mode = PrivacyMode(mode)
            self.user_privacy_choices[session_id] = {
                'mode': privacy_mode,
                'timestamp': time.time(),
                'consent': user_consent,
                'ip_hash': user_consent.get('ip_hash'),
                'user_agent_hash': user_consent.get('user_agent_hash')
            }
            return True
        except ValueError:
            return False
    
    def get_user_privacy_mode(self, session_id: str) -> Optional[PrivacyMode]:
        """Z√≠ska privacy m√≥d pre session"""
        choice = self.user_privacy_choices.get(session_id)
        return choice['mode'] if choice else None
    
    def store_message(self, session_id: str, role: str, content: str, 
                     crisis_detected: bool = False) -> bool:
        """Ulo≈æ√≠ spr√°vu podƒæa zvolen√©ho privacy m√≥du"""
        privacy_mode = self.get_user_privacy_mode(session_id)
        
        if not privacy_mode:
            # Default to ephemeral if no choice made
            privacy_mode = PrivacyMode.EPHEMERAL
        
        message_data = {
            'role': role,
            'content': content,
            'timestamp': time.time(),
            'crisis_detected': crisis_detected
        }
        
        if privacy_mode == PrivacyMode.EPHEMERAL:
            return self._store_ephemeral(session_id, message_data)
        elif privacy_mode == PrivacyMode.TEMPORARY:
            return self._store_temporary(session_id, message_data)
        elif privacy_mode == PrivacyMode.PERSISTENT:
            return self._store_persistent(session_id, message_data)
        elif privacy_mode == PrivacyMode.ENCRYPTED:
            return self._store_encrypted(session_id, message_data)
        
        return False
    
    def _store_ephemeral(self, session_id: str, message_data: Dict) -> bool:
        """Ulo≈æ√≠ do pam√§te - zma≈æe sa pri re≈°tarte servera"""
        if session_id not in self.ephemeral_sessions:
            self.ephemeral_sessions[session_id] = []
        
        # Udr≈æuj max 20 spr√°v v pam√§ti
        if len(self.ephemeral_sessions[session_id]) >= 20:
            self.ephemeral_sessions[session_id].pop(0)
        
        self.ephemeral_sessions[session_id].append(message_data)
        return True
    
    def _store_temporary(self, session_id: str, message_data: Dict) -> bool:
        """Ulo≈æ√≠ s 24h expiration"""
        # Tu by si pou≈æil datab√°zu s TTL (Time To Live)
        expiration = time.time() + (24 * 60 * 60)  # 24 hod√≠n
        
        if session_id not in self.temporary_sessions:
            self.temporary_sessions[session_id] = {
                'messages': [],
                'expires_at': expiration
            }
        
        self.temporary_sessions[session_id]['messages'].append(message_data)
        return True
    
    def _store_persistent(self, session_id: str, message_data: Dict) -> bool:
        """Ulo≈æ√≠ do datab√°zy natrvalo"""
        # Tu by si pou≈æil tvoju datab√°zov√∫ vrstvu
        print(f"Storing persistent message for {session_id}")
        return True
    
    def _store_encrypted(self, session_id: str, message_data: Dict) -> bool:
        """Ulo≈æ√≠ ≈°ifrovan√© s pou≈æ√≠vateƒæov√Ωm kƒæ√∫ƒçom"""
        # Tu by bolo end-to-end ≈°ifrovanie
        print(f"Storing encrypted message for {session_id}")
        return True
    
    def get_conversation_history(self, session_id: str, limit: int = 20) -> List[Dict]:
        """Z√≠ska hist√≥riu podƒæa privacy m√≥du"""
        privacy_mode = self.get_user_privacy_mode(session_id)
        
        if privacy_mode == PrivacyMode.EPHEMERAL:
            return self.ephemeral_sessions.get(session_id, [])[-limit:]
        elif privacy_mode == PrivacyMode.TEMPORARY:
            session_data = self.temporary_sessions.get(session_id)
            if session_data and time.time() < session_data['expires_at']:
                return session_data['messages'][-limit:]
            else:
                # Expired, clean up
                if session_id in self.temporary_sessions:
                    del self.temporary_sessions[session_id]
                return []
        elif privacy_mode in [PrivacyMode.PERSISTENT, PrivacyMode.ENCRYPTED]:
            # Tu by si naƒç√≠tal z datab√°zy
            return []
        
        return []
    
    def delete_user_data(self, session_id: str, delete_scope: str = "session") -> Dict:
        """
        Zma≈æe d√°ta pou≈æ√≠vateƒæa podƒæa rozsahu
        delete_scope: "session" | "all" | "everything"
        """
        result = {
            'deleted_sessions': 0,
            'deleted_messages': 0,
            'deleted_from': [],
            'permanent': True
        }
        
        privacy_mode = self.get_user_privacy_mode(session_id)
        
        if delete_scope == "session":
            # Zma≈æ len aktu√°lnu session
            if privacy_mode == PrivacyMode.EPHEMERAL:
                if session_id in self.ephemeral_sessions:
                    result['deleted_messages'] = len(self.ephemeral_sessions[session_id])
                    del self.ephemeral_sessions[session_id]
                    result['deleted_from'].append('memory')
            
            elif privacy_mode == PrivacyMode.TEMPORARY:
                if session_id in self.temporary_sessions:
                    result['deleted_messages'] = len(self.temporary_sessions[session_id]['messages'])
                    del self.temporary_sessions[session_id]
                    result['deleted_from'].append('temporary_storage')
            
            elif privacy_mode in [PrivacyMode.PERSISTENT, PrivacyMode.ENCRYPTED]:
                # Tu by si zmazal z datab√°zy
                result['deleted_from'].append('database')
                result['deleted_messages'] = self._delete_from_database(session_id)
            
            result['deleted_sessions'] = 1
        
        elif delete_scope == "everything":
            # Zma≈æ v≈°etko vr√°tane z Microsoft Azure, logov, backupov
            result['deleted_from'] = [
                'memory', 'temporary_storage', 'database', 
                'azure_logs', 'backups', 'analytics'
            ]
            result['deleted_sessions'] = self._delete_everything(session_id)
        
        # Zma≈æ aj privacy choice
        if session_id in self.user_privacy_choices:
            del self.user_privacy_choices[session_id]
        
        return result
    
    def _delete_from_database(self, session_id: str) -> int:
        """Zma≈æe z datab√°zy a v≈°etk√Ωch s√∫visiacich tabuliek"""
        # Tu by bola implement√°cia mazania z datab√°zy
        print(f"Deleting from database: {session_id}")
        return 0
    
    def _delete_everything(self, session_id: str) -> int:
        """Kompletn√© vymazanie zo v≈°etk√Ωch syst√©mov"""
        print(f"Complete deletion requested for: {session_id}")
        # Tu by bolo:
        # 1. Zmazanie z datab√°zy
        # 2. Zmazanie z Azure logs
        # 3. Zmazanie z backup syst√©mov
        # 4. Zmazanie z analytics
        # 5. Notifik√°cia v≈°etk√Ωch syst√©mov
        return 1
    
    def export_user_data(self, session_id: str) -> Dict:
        """Exportuje v≈°etky d√°ta pou≈æ√≠vateƒæa pre GDPR compliance"""
        privacy_mode = self.get_user_privacy_mode(session_id)
        
        export_data = {
            'export_timestamp': time.time(),
            'export_date': time.strftime('%Y-%m-%d %H:%M:%S'),
            'session_id': session_id[:8] + "...",  # Partial pre anonymitu
            'privacy_mode': privacy_mode.value if privacy_mode else 'ephemeral',
            'conversation_history': self.get_conversation_history(session_id),
            'privacy_choices': self.user_privacy_choices.get(session_id, {}),
            'gdpr_rights': {
                'right_to_delete': 'You can delete all your data anytime',
                'right_to_rectification': 'You can correct inaccurate data',
                'right_to_portability': 'This export fulfills your portability rights'
            }
        }
        
        return export_data
    
    def cleanup_expired_data(self):
        """Vyƒçist√≠ expired temporary sessions"""
        current_time = time.time()
        expired_sessions = []
        
        for session_id, data in self.temporary_sessions.items():
            if current_time > data['expires_at']:
                expired_sessions.append(session_id)
        
        for session_id in expired_sessions:
            del self.temporary_sessions[session_id]
            print(f"Auto-deleted expired session: {session_id}")
        
        return len(expired_sessions)

# ========================================
# FLASK ROUTES PRE PRIVACY CONTROL
# ========================================

app = Flask(__name__)
privacy_manager = PrivacyManager()

@app.route('/privacy/options', methods=['GET'])
def get_privacy_options():
    """Vr√°ti dostupn√© privacy mo≈ænosti"""
    return jsonify(privacy_manager.get_privacy_options())

@app.route('/privacy/choose', methods=['POST'])
def choose_privacy_mode():
    """Pou≈æ√≠vateƒæ si vyberie privacy m√≥d"""
    data = request.get_json()
    session_id = session.get('session_id', str(uuid.uuid4()))
    
    privacy_mode = data.get('mode')
    user_consent = {
        'explicit_consent': data.get('consent', False),
        'timestamp': time.time(),
        'ip_hash': hash(request.remote_addr) if request.remote_addr else None,
        'user_agent_hash': hash(request.headers.get('User-Agent', ''))
    }
    
    if privacy_manager.set_user_privacy_choice(session_id, privacy_mode, user_consent):
        session['session_id'] = session_id
        return jsonify({
            'success': True,
            'session_id': session_id[:8] + "...",
            'mode': privacy_mode,
            'message': f'Privacy m√≥d "{privacy_mode}" bol nastaven√Ω.',
            'data_retention': privacy_manager.get_privacy_options()['modes'][0]['retention']
        })
    else:
        return jsonify({'success': False, 'error': 'Invalid privacy mode'}), 400

@app.route('/privacy/delete', methods=['POST'])
def delete_user_data():
    """Zma≈æe d√°ta pou≈æ√≠vateƒæa"""
    data = request.get_json()
    session_id = session.get('session_id')
    
    if not session_id:
        return jsonify({'error': 'No active session'}), 400
    
    delete_scope = data.get('scope', 'session')  # session | all | everything
    confirmation = data.get('confirmation', False)
    
    if not confirmation:
        return jsonify({'error': 'Confirmation required'}), 400
    
    result = privacy_manager.delete_user_data(session_id, delete_scope)
    
    # Clear session after deletion
    session.clear()
    
    return jsonify({
        'success': True,
        'deletion_result': result,
        'message': 'Va≈°e d√°ta boli √∫spe≈°ne zmazan√©.',
        'permanent': True,
        'confirmation_id': str(uuid.uuid4())[:8]
    })

@app.route('/privacy/export', methods=['GET'])
def export_user_data():
    """Exportuje d√°ta pou≈æ√≠vateƒæa"""
    session_id = session.get('session_id')
    
    if not session_id:
        return jsonify({'error': 'No active session'}), 400
    
    export_data = privacy_manager.export_user_data(session_id)
    
    return jsonify({
        'success': True,
        'export_data': export_data,
        'download_filename': f'klidbot_export_{int(time.time())}.json'
    })

@app.route('/privacy/status', methods=['GET'])
def get_privacy_status():
    """Z√≠ska aktu√°lny privacy status"""
    session_id = session.get('session_id')
    
    if not session_id:
        return jsonify({
            'has_session': False,
            'mode': 'ephemeral',
            'message': 'No active session - defaulting to ephemeral mode'
        })
    
    privacy_mode = privacy_manager.get_user_privacy_mode(session_id)
    history_count = len(privacy_manager.get_conversation_history(session_id))
    
    return jsonify({
        'has_session': True,
        'session_id': session_id[:8] + "...",
        'mode': privacy_mode.value if privacy_mode else 'ephemeral',
        'messages_stored': history_count,
        'can_delete': True,
        'can_export': history_count > 0
    })

# Background cleanup job
import threading
def background_cleanup():
    while True:
        time.sleep(3600)  # Ka≈æd√∫ hodinu
        privacy_manager.cleanup_expired_data()

cleanup_thread = threading.Thread(target=background_cleanup, daemon=True)
cleanup_thread.start()

if __name__ == '__main__':
    app.run(debug=True)
